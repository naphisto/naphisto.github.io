{"version":3,"sources":["components/CountryCard.tsx","components/Loader.tsx","hooks/useCountries.tsx","hooks/useCurrencyOptions.tsx","hooks/useLanguageOptions.tsx","hooks/useRegionOptions.tsx","pages/Countries/index.tsx","pages/Country/index.tsx","Router/index.tsx","index.tsx"],"names":["CountryCard","link","alpha2Code","name","population","to","className","LoaderStyle","styled","div","Loader","GET_COUNTRIES","gql","GET_COUNTRIES_BY_FILTER","useCountries","useQuery","data","loadingCountries","loading","variables","searchText","currency","language","region","dataByFilter","loadingCountriesByFilter","refetchDataByFilter","refetch","countriesByFilter","Country","countries","searchByFilter","filters","GET_CURRENCIES","useCurrencyOptions","currencyOptionsLoading","currencyOptions","Currency","map","code","label","value","GET_LANGUAGES","useLanguages","languageOptionsLoading","languageOptions","Language","iso639_2","GET_REGIONS","useRegionOptions","regionOptionsLoading","regionOptions","Region","selectStyles","control","provided","height","borderColor","borderRadius","Countries","useState","setFilters","displayCountries","setDisplayCountries","useLanguageOptions","countriesLoading","useEffect","onChange","e","target","placeholder","options","isLoading","isClearable","option","styles","type","_id","DetailCard","title","undefined","GET_COUNTRY","CountryDetail","country","length","countryData","populationDensity","demonym","capital","area","nativeName","client","ApolloClient","uri","cache","InMemoryCache","AppRouter","path","ReactDOM","render","Router","document","getElementById"],"mappings":"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","file":"static/js/main.e5e1673e.chunk.js","sourcesContent":["import React from 'react';\nimport { Link } from '@reach/router';\n\ninterface CountryCardProps {\n  link: string,\n  alpha2Code: string,\n  name: string,\n  population: number,\n}\n\nconst CountryCard: React.FC<CountryCardProps> = ({\n  link, alpha2Code, name, population,\n}) => (\n  <Link to={link}>\n    <div className=\"cursor-pointer border-4 border-white hover:border-indigo-500 bg-white flex p-5 rounded-lg w-full transition duration-200 ease-in-out\">\n      <div className=\"w-14 h-14 sm:w-20 sm:h-20 mr-4 sm:mr-6 bg-indigo-100 rounded-md flex justify-center items-center\">\n        <span className=\"text-xl sm:text-2xl font-semibold\">\n          {alpha2Code}\n        </span>\n      </div>\n      <div className=\"flex flex-col justify-center\">\n        <span className=\"text-lg sm:text-xl font-bold mb-1 sm:mb-2\">\n          {name}\n        </span>\n        <span className=\"text-sm sm:text-base font-semibold text-gray-300\">\n          {`Population: ${population}`}\n        </span>\n      </div>\n    </div>\n  </Link>\n);\n\nexport default CountryCard;\n","import React from 'react';\nimport styled from 'styled-components';\n\nexport const LoaderStyle = styled.div`\n  width: 100%;\n  height: 250px;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  .lds-facebook {\n    display: inline-block;\n    position: relative;\n    width: 80px;\n    height: 80px;\n  }\n  .lds-facebook div {\n    display: inline-block;\n    position: absolute;\n    left: 8px;\n    width: 16px;\n    background:#3B82F6;\n    animation: lds-facebook 1.2s cubic-bezier(0, 0.5, 0.5, 1) infinite;\n  }\n  .lds-facebook div:nth-child(1) {\n    left: 8px;\n    animation-delay: -0.24s;\n  }\n  .lds-facebook div:nth-child(2) {\n    left: 32px;\n    animation-delay: -0.12s;\n  }\n  .lds-facebook div:nth-child(3) {\n    left: 56px;\n    animation-delay: 0;\n  }\n  @keyframes lds-facebook {\n    0% {\n      top: 8px;\n      height: 64px;\n    }\n    50%, 100% {\n      top: 24px;\n      height: 32px;\n    }\n  }\n`;\n\nconst Loader: React.FC = () => (\n  <LoaderStyle>\n    <div className=\"lds-facebook\">\n      <div />\n      <div />\n      <div />\n    </div>\n  </LoaderStyle>\n);\n\nexport default Loader;\n","import { gql, useQuery } from '@apollo/client';\n\ninterface Country {\n  _id: string,\n  name: string,\n  alpha2Code: string,\n  population: number,\n}\n\ninterface UseCountries {\n  countriesByFilter: Array<Country>,\n  countries: Array<Country>,\n  loading: boolean,\n  searchByFilter: any,\n}\n\ninterface Filter {\n  searchText: string,\n}\n\nconst GET_COUNTRIES = gql`\n  {\n    Country {\n      _id,\n      name,\n      alpha2Code,\n      population,\n    }\n  }\n`;\n\nconst GET_COUNTRIES_BY_FILTER = gql`\n  query Country($currency: String!, $language: String!, $region: String!, $searchText: String!) {\n    Country(filter: {\n      AND: [\n        { currencies: { code_contains: $currency } }\n        { officialLanguages: { iso639_2_contains: $language } }\n        { subregion: { region: { name_contains: $region } } }\n      ]\n      OR: [\n        { alpha2Code_contains: $searchText }\n        { name_contains: $searchText }\n      ]\n    }) {\n      _id,\n      name,\n      alpha2Code,\n      population,\n    }\n  } \n`;\n\nconst useCountries = (): UseCountries => {\n  const { data, loading: loadingCountries } = useQuery(GET_COUNTRIES);\n  const {\n    data: dataByFilter,\n    loading: loadingCountriesByFilter,\n    refetch: refetchDataByFilter,\n  } = useQuery(GET_COUNTRIES_BY_FILTER, {\n    variables: {\n      searchText: '',\n      currency: '',\n      language: '',\n      region: '',\n    },\n  });\n\n  const searchByFilter = (filters: Filter) => {\n    refetchDataByFilter(filters);\n  };\n\n  return {\n    countriesByFilter: dataByFilter?.Country,\n    countries: data?.Country,\n    loading: loadingCountries || loadingCountriesByFilter,\n    searchByFilter,\n  };\n};\n\nexport default useCountries;\n","import { gql, useQuery } from '@apollo/client';\n\ninterface Option {\n  value: string,\n  label: string,\n}\n\ninterface Currency {\n  _id: string,\n  code: string,\n  name: string,\n}\n\ninterface UseCurrencies {\n  currencyOptions: Array<Option>,\n  currencyOptionsLoading: boolean,\n}\n\nconst GET_CURRENCIES = gql`\n  {\n    Currency {\n      _id,\n      code,\n      name,\n      symbol,\n    }\n  }\n`;\n\nconst useCurrencyOptions = (): UseCurrencies => {\n  const { data, loading: currencyOptionsLoading } = useQuery(GET_CURRENCIES);\n\n  const currencyOptions = data?.Currency.map(({ code, name }: Currency) => ({\n    label: name,\n    value: code,\n  }));\n\n  return {\n    currencyOptions,\n    currencyOptionsLoading,\n  };\n};\n\nexport default useCurrencyOptions;\n","/* eslint-disable camelcase */\nimport { gql, useQuery } from '@apollo/client';\n\ninterface Option {\n  value: string,\n  label: string,\n}\n\ninterface Language {\n  _id: string,\n  name: string,\n  iso639_2: string,\n}\n\ninterface UseLanguages {\n  languageOptions: Array<Option>,\n  languageOptionsLoading: boolean,\n}\n\nconst GET_LANGUAGES = gql`\n  {\n    Language {\n      _id,\n      name,\n      iso639_2,\n    }\n  }\n`;\n\nconst useLanguages = (): UseLanguages => {\n  const { data, loading: languageOptionsLoading } = useQuery(GET_LANGUAGES);\n\n  const languageOptions = data?.Language.map(({ name, iso639_2 }: Language) => ({\n    label: name,\n    value: iso639_2,\n  }));\n\n  return {\n    languageOptions,\n    languageOptionsLoading,\n  };\n};\n\nexport default useLanguages;\n","import { gql, useQuery } from '@apollo/client';\n\ninterface Option {\n  value: string,\n  label: string,\n}\n\ninterface Region {\n  _id: string,\n  name: string,\n}\n\ninterface UseRegions {\n  regionOptions: Array<Option>,\n  regionOptionsLoading: boolean,\n}\n\nconst GET_REGIONS = gql`\n  {\n    Region {\n      _id,\n      name,\n    }\n  }\n`;\n\nconst useRegionOptions = (): UseRegions => {\n  const { data, loading: regionOptionsLoading } = useQuery(GET_REGIONS);\n\n  const regionOptions = data?.Region.map(({ name }: Region) => ({\n    label: name,\n    value: name,\n  }));\n\n  return {\n    regionOptions,\n    regionOptionsLoading,\n  };\n};\n\nexport default useRegionOptions;\n","import React, { useEffect, useState } from 'react';\nimport Select from 'react-select';\nimport CountryCard from '../../components/CountryCard';\nimport Loader from '../../components/Loader';\nimport useCountries from '../../hooks/useCountries';\nimport useCurrencyOptions from '../../hooks/useCurrencyOptions';\nimport useLanguageOptions from '../../hooks/useLanguageOptions';\nimport useRegionOptions from '../../hooks/useRegionOptions';\n\ninterface CountriesProps {\n  path: string,\n}\n\ninterface Country {\n  _id: string,\n  name: string,\n  alpha2Code: string,\n  population: number,\n}\n\nconst selectStyles = {\n  control: (provided: any) => ({\n    ...provided,\n    height: '100%',\n    borderColor: '#D1D5DB',\n    borderRadius: '.375rem',\n  }),\n};\n\nconst Countries: React.FC<CountriesProps> = () => {\n  const [filters, setFilters] = useState({\n    searchText: '',\n    currency: '',\n    language: '',\n    region: '',\n  });\n  const [displayCountries, setDisplayCountries] = useState<Array<Country>>([]);\n\n  const { currencyOptions, currencyOptionsLoading } = useCurrencyOptions();\n  const { languageOptions, languageOptionsLoading } = useLanguageOptions();\n  const { regionOptions, regionOptionsLoading } = useRegionOptions();\n\n  const {\n    countries,\n    countriesByFilter,\n    loading: countriesLoading,\n    searchByFilter,\n  } = useCountries();\n\n  // Set the countries displayed\n  useEffect(() => {\n    if (countriesLoading) return;\n\n    if (filters.searchText === '' && filters.currency === '' && filters.language === '' && filters.region === '') {\n      setDisplayCountries(countries);\n    } else {\n      setDisplayCountries(countriesByFilter);\n    }\n  }, [countries, countriesByFilter, countriesLoading, filters.searchText]);\n\n  // Search by filter\n  useEffect(() => {\n    searchByFilter(filters);\n  }, [filters]);\n\n  return (\n    <div>\n      <div className=\"grid grid-cols-4 sm:grid-cols-5 gap-4 sm:gap-6 mb-4 sm:mb-6\">\n        <input\n          onChange={(e) => setFilters({ ...filters, searchText: e.target.value })}\n          className=\"p-4 border-gray-300 col-span-3 sm:col-span-4 lg:col-span-2 text-base rounded-lg border outline-none focus:ring-1 focus:ring-blue-500\"\n          placeholder=\"Search country\"\n        />\n        <Select\n          options={currencyOptions}\n          isLoading={currencyOptionsLoading}\n          isClearable\n          onChange={(option) => setFilters({ ...filters, currency: option?.value || '' })}\n          placeholder=\"Select a currency\"\n          styles={selectStyles}\n          className=\"w-full hidden lg:block\"\n        />\n        <Select\n          options={languageOptions}\n          isLoading={languageOptionsLoading}\n          isClearable\n          onChange={(option) => setFilters({ ...filters, language: option?.value || '' })}\n          placeholder=\"Select a language\"\n          styles={selectStyles}\n          className=\"w-full hidden lg:block\"\n        />\n        <Select\n          options={regionOptions}\n          isLoading={regionOptionsLoading}\n          isClearable\n          onChange={(option) => setFilters({ ...filters, region: option?.value || '' })}\n          placeholder=\"Select a region\"\n          styles={selectStyles}\n          className=\"w-full hidden lg:block\"\n        />\n        <button\n          className=\"lg:hidden bg-white h-full col-span-1 sm:col-span-1 p-3 rounded-lg border border-gray-300 flex justify-center items-center cursor-pointer hover:bg-gray-100\"\n          type=\"button\"\n        >\n          <span className=\"material-icons\">filter_list</span>\n        </button>\n      </div>\n      {!countriesLoading ? (\n        <div className=\"grid grid-cols-1 gap-4 sm:gap-6\">\n          {displayCountries?.map(({\n            _id, name, alpha2Code, population,\n          }) => (\n            <CountryCard\n              key={_id}\n              alpha2Code={alpha2Code}\n              name={name}\n              link={`/${alpha2Code}`}\n              population={population}\n            />\n          ))}\n        </div>\n      ) : <Loader />}\n    </div>\n  );\n};\n\nexport default Countries;\n","import React from 'react';\nimport { Link } from '@reach/router';\nimport { gql, useQuery } from '@apollo/client';\nimport Loader from '../../components/Loader';\n\ninterface DetailCardProps {\n  title: string,\n  value: any,\n}\n\nconst DetailCard: React.FC<DetailCardProps> = ({ title, value }) => {\n  if (value === undefined || value === '') return null;\n\n  return (\n    <div className=\"flex-1 p-5 rounded-lg border border-gray-300\">\n      <span className=\"block text-xl font-semibold mb-1 sm:mb-2\">{title}</span>\n      <span>\n        {value}\n      </span>\n    </div>\n  );\n};\n\ninterface CountryProps {\n  path: string,\n  country?: string,\n}\n\nconst GET_COUNTRY = gql`\n  query Country($country: String!) {\n    Country (alpha2Code:$country) {\n      _id,\n      name,\n      alpha2Code,\n      population,\n      populationDensity,\n      demonym,\n      capital,\n      area,\n      nativeName,\n    }\n  }\n`;\n\nconst CountryDetail: React.FC<CountryProps> = ({ country }) => {\n  const { data, loading } = useQuery(GET_COUNTRY, {\n    variables: {\n      country,\n    },\n  });\n\n  if (loading) return <Loader />;\n\n  if (data?.Country.length === 0) {\n    return (\n      <div className=\"text-center p-10\">\n        <h1 className=\"text-xl sm:text-4xl\">\n          This country does not exist\n        </h1>\n      </div>\n    );\n  }\n\n  const [countryData] = data?.Country;\n  const {\n    alpha2Code, name, population, populationDensity, demonym, capital, area, nativeName,\n  } = countryData;\n\n  return (\n    <div className=\"bg-white rounded-lg p-8 md:mb-5\">\n      <div className=\"flex items-center mb-5\">\n        <div className=\"flex-1\">\n          <h1 className=\"text-2xl md:text-4xl font-bold mb-1\">\n            {name}\n            <span className=\"text-gray-400 font-semibold\">{` (${alpha2Code})`}</span>\n          </h1>\n        </div>\n        <Link to=\"/\">\n          <span className=\"material-icons text-3xl\">close</span>\n        </Link>\n      </div>\n      <div className=\"flex flex-wrap gap-6\">\n        <DetailCard title=\"Demonym\" value={demonym} />\n        <DetailCard title=\"Capital\" value={capital} />\n        <DetailCard title=\"Population\" value={population} />\n        <DetailCard title=\"Density\" value={populationDensity} />\n        <DetailCard title=\"Area\" value={area} />\n        <DetailCard title=\"Native Name\" value={nativeName} />\n      </div>\n    </div>\n  );\n};\n\nexport default CountryDetail;\n","import React from 'react';\nimport { Router } from '@reach/router';\nimport { ApolloClient, InMemoryCache, ApolloProvider } from '@apollo/client';\nimport Countries from '../pages/Countries';\nimport Country from '../pages/Country';\n\nconst client = new ApolloClient({\n  uri: 'https://countries-274616.ew.r.appspot.com/',\n  cache: new InMemoryCache(),\n});\n\nconst AppRouter: React.FC = () => (\n  <div className=\"p-5 sm:p-10\">\n    <ApolloProvider client={client}>\n      <Router>\n        <Countries path=\"/\" />\n        <Country path=\"/:country\" />\n      </Router>\n    </ApolloProvider>\n  </div>\n);\n\nexport default AppRouter;\n","import ReactDOM from 'react-dom';\nimport Router from './Router';\n\nReactDOM.render(\n  <Router />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}